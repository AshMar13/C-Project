#include <iostream>
#include <string>
#include <iomanip>
using namespace std;

// Clase base para actuadores
class Actuator {
protected:
    string state = "OFF";
    float power = 0.0;
    float energy_used = 0.0;
    float cycles = 0.0;
    float on_time = 0.0;

public:
    void simulate1Hr() {
        if (state == "ON") {
            energy_used += power;
            on_time += 1.0; // Incrementar el tiempo encendido
            cycles += 0.5;  // Suponer medio ciclo por hora encendido
        }
    }

    void turnOn(float pwr) {
        state = "ON";
        power = pwr;
    }

    void turnOff() {
        state = "OFF";
        power = 0.0;
    }

    string getState() const { return state; }
    float getEnergyUsed() const { return energy_used; }
    float getCycles() const { return cycles; }
    float getOnTime() const { return on_time; }
};

// Clase para FCU
class FCU : public Actuator {
public:
    float temperatureTransferCoefficient = 0.0;

    void setTTC(float ttc) { temperatureTransferCoefficient = ttc; }
    float getTTC() const { return temperatureTransferCoefficient; }
};

// Clase base para circuitos de fluido
class FluidCircuit {
protected:
    string fluid_type;
    float fluidTemperature = 0.0;

public:
    virtual void simulate1Hr(float outdoorTemp, float condensedTemp) = 0;
    float getTemperature() const { return fluidTemperature; }
};

// Clase para agua fría
class ChilledWater : public FluidCircuit {
protected:
    Actuator chillers[2];
    Actuator pumps[4];

public:
    void simulate1Hr(float outdoorTemp, float condensedTemp) override {
        int activeChillers = 1; // Suponer 1 chiller activo
        int activePumps = 2;    // Suponer 2 bombas activas

        float Kc = (activeChillers == 1) ? 0.6 : 0.8;
        float Kp = (activePumps == 1) ? 0.5 : 0.9;
        float TTCch = (30 - condensedTemp) / 12.0 * Kc * Kp;

        fluidTemperature += TTCch * (8.0f - fluidTemperature);

        for (auto &chiller : chillers) chiller.simulate1Hr();
        for (auto &pump : pumps) pump.simulate1Hr();
    }
};

// Clase para lugares
class Place {
protected:
    float room_temperature_off = 16.0;
    float room_temperature_init = 16.0;
    float ambient_room_rate = 0.7;
    bool hour_occupancy[24] = {false};
    int comfortOK = 0;
    int comfortBad = 0;
    FCU fcu;

public:
    Place(float rate) : ambient_room_rate(rate) {}

    void simulate1Hr(int hour, float outdoorTemp, float chilledTemp) {
        float dT = outdoorTemp - room_temperature_init;
        room_temperature_off = room_temperature_init + ambient_room_rate * dT;

        if (hour_occupancy[hour]) {
            fcu.turnOn(6.0); // Encender FCU con 6 kW
            float TTC = fcu.getTTC();
            room_temperature_init = room_temperature_off +
                                    TTC * (chilledTemp - room_temperature_off);

            if (room_temperature_init >= 20 && room_temperature_init <= 24) {
                comfortOK++;
            } else {
                comfortBad++;
            }
        } else {
            fcu.turnOff();
            room_temperature_init = room_temperature_off;
        }

        fcu.simulate1Hr();
    }

    void setOccupancy(const bool occupancy[24]) {
        for (int i = 0; i < 24; ++i) hour_occupancy[i] = occupancy[i];
    }

    void printHourStatus(const string &name, int hour) const {
        cout << name << ":\n"
             << "  ComfortOK: " << comfortOK << ", ComfortBAD: " << comfortBad << "\n"
             << "  Fan&Coil Unit: State: " << fcu.getState()
             << ", Energy: " << fcu.getEnergyUsed()
             << ", Cycles: " << fcu.getCycles()
             << ", Time: " << fcu.getOnTime() << "\n"
             << "  Room Temperature: " << fixed << setprecision(2) << room_temperature_init << "\n";
    }
};

// Función principal
int main() {
    // Configuración inicial
    bool classroom1Occupancy[24] = {false, false, false, false, false, false, false, false, false, true,
                                    true, true, true, true, true, true, true, true, false, false,
                                    false, false, false, false};
    bool classroom2Occupancy[24] = {false, false, false, false, false, false, true, true, true, true,
                                    true, true, true, true, true, true, true, true, true, true,
                                    true, false, false, false};
    bool libraryOccupancy[24] = {false, false, false, false, false, false, true, true, true, true,
                                 true, true, false, false, true, true, true, true, true, true,
                                 false, false, false, false};

    Place classroom1(0.7), classroom2(0.7), library(0.9);
    classroom1.setOccupancy(classroom1Occupancy);
    classroom2.setOccupancy(classroom2Occupancy);
    library.setOccupancy(libraryOccupancy);

    ChilledWater chilledCircuit;
    float condensedTemp = 22.0;

    // Simulación de 24 horas
    for (int hour = 0; hour < 24; ++hour) {
        cout << "Hour: " << setw(2) << hour << "\n";

        classroom1.simulate1Hr(hour, 30.0, chilledCircuit.getTemperature());
        classroom2.simulate1Hr(hour, 30.0, chilledCircuit.getTemperature());
        library.simulate1Hr(hour, 30.0, chilledCircuit.getTemperature());
        chilledCircuit.simulate1Hr(30.0, condensedTemp);

        classroom1.printHourStatus("Aulas 1", hour);
        classroom2.printHourStatus("Aulas 2", hour);
        library.printHourStatus("Biblioteca", hour);
        cout << "---------------------------------------------\n";
    }

    // Resumen final
    cout << "at 24:00 hrs\n";
    classroom1.printHourStatus("Aulas 1", 24);
    classroom2.printHourStatus("Aulas 2", 24);
    library.printHourStatus("Biblioteca", 24);

    return 0;
}
