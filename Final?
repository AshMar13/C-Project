#include <iostream>
#include <iomanip>
using namespace std;

class Place {
protected:
    float room_temperature;
    float ambient_room_rate;
    float outdoor_temperature;
    bool hour_occupancy[24];

public:
    int comfortOK;
    int comfortBad;

    Place(float arr, float outdoorTemp, const bool occupancy[24]) {
        room_temperature = 16.0f; // Initial temperature
        ambient_room_rate = arr;
        outdoor_temperature = outdoorTemp;
        comfortOK = 0;
        comfortBad = 0;
        for (int i = 0; i < 24; i++) {
            hour_occupancy[i] = occupancy[i];
        }
    }

    void transferForHeatingOffConditions(int hour) {
        // Update room temperature during off conditions
        room_temperature += ambient_room_rate * (outdoor_temperature - room_temperature);
    }

    void calculateComfort(int hour) {
        if (hour_occupancy[hour]) {
            // Adjust temperature to improve comfort aggressively
            if (room_temperature < 20) {
                room_temperature += 2.0; // Heat up faster
            } else if (room_temperature > 24) {
                room_temperature -= 2.0; // Cool down faster
            }

            // Check if the temperature is within the comfort range
            if (room_temperature >= 20 && room_temperature <= 24) {
                comfortOK++;
            } else {
                comfortBad++;
            }
        } else {
            // If unoccupied, only update temperature passively
            transferForHeatingOffConditions(hour);
        }
    }

    float getTemperature() const {
        return room_temperature;
    }

    int getComfortOK() const {
        return comfortOK;
    }

    int getComfortBad() const {
        return comfortBad;
    }

    bool isOccupied(int hour) const {
        return hour_occupancy[hour];
    }
};

int main() {
    // Define occupancy schedules
    bool classroom1_occupancy[24] = {false, false, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, false, false, false, false, false, false};
    bool classroom2_occupancy[24] = {false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, false, false, false};
    bool library_occupancy[24] = {false, false, false, false, false, false, true, true, true, true, true, true, false, false, true, true, true, true, true, true, false, false, false, false};

    // Outdoor temperature simulation (summer conditions in CDMX)
    float outdoor_temperature = 30.0f;

    // Create places
    Place classroom1(0.7f, outdoor_temperature, classroom1_occupancy);
    Place classroom2(0.7f, outdoor_temperature, classroom2_occupancy);
    Place library(0.9f, outdoor_temperature, library_occupancy);

    // Simulate for 24 hours
    for (int hour = 0; hour < 24; hour++) {
        // Update temperature and comfort for each place
        classroom1.calculateComfort(hour);
        classroom2.calculateComfort(hour);
        library.calculateComfort(hour);

        // Print hourly status
        cout << "Hour " << setw(2) << hour << ": ";
        cout << "Classroom1 [" << (classroom1.isOccupied(hour) ? "Occupied" : "Unoccupied") << "] Temp: " 
             << fixed << setprecision(1) << classroom1.getTemperature() << "C, Comfort OK: " << classroom1.getComfortOK()
             << ", Comfort Bad: " << classroom1.getComfortBad() << "\n";
        cout << "         Classroom2 [" << (classroom2.isOccupied(hour) ? "Occupied" : "Unoccupied") << "] Temp: " 
             << classroom2.getTemperature() << "C, Comfort OK: " << classroom2.getComfortOK()
             << ", Comfort Bad: " << classroom2.getComfortBad() << "\n";
        cout << "         Library [" << (library.isOccupied(hour) ? "Occupied" : "Unoccupied") << "] Temp: " 
             << library.getTemperature() << "C, Comfort OK: " << library.getComfortOK()
             << ", Comfort Bad: " << library.getComfortBad() << "\n";
        cout << "---------------------------------------------\n";
    }

    // Final summary
    cout << "\nFinal Summary:\n";
    cout << "Classroom1 - Comfort OK: " << classroom1.getComfortOK() << ", Comfort Bad: " << classroom1.getComfortBad() << endl;
    cout << "Classroom2 - Comfort OK: " << classroom2.getComfortOK() << ", Comfort Bad: " << classroom2.getComfortBad() << endl;
    cout << "Library - Comfort OK: " << library.getComfortOK() << ", Comfort Bad: " << library.getComfortBad() << endl;

    return 0;
}
